#!/usr/bin/env bash

# Stop on failures
set -e

if ! xcode-select -p > /dev/null 2>&1; then
  echo "Command Line Tools are not installed. Install them and try again."
  xcode-select --install > /dev/null 2>&1
  exit 1
fi

sudo -v

: "${FISH_TARGET_VERSION:=3.1.2}"
if ! fish --version > /dev/null 2>&1; then
  echo "Downloading Fish shell..."
  curl -Ls "https://github.com/fish-shell/fish-shell/releases/download/${FISH_TARGET_VERSION}/fish-${FISH_TARGET_VERSION}.pkg" --output "fish-${FISH_TARGET_VERSION}.pkg" > /dev/null
  
  echo "Installing..."
  sudo installer -pkg "fish-${FISH_TARGET_VERSION}.pkg" -target /
  echo $(which fish) | sudo tee -a /etc/shells
  chsh -s $(which fish)

  echo "Cleaning up..."
  rm "fish-${FISH_TARGET_VERSION}.pkg"
fi

###############################################################################
# Git                                                                          
###############################################################################
if [ -n "$GIT_NAME" ]; then
    git config --global user.name $GIT_NAME
    echo "Git global name set to $GIT_NAME"
fi

if [ -n "$GIT_EMAIL" ]; then
    git config --global user.email $GIT_EMAIL
    echo "Git global email set to $GIT_EMAIL"
fi

# Set the timezone; see `sudo systemsetup -listtimezones` for other values
: "${TARGET_TIMEZONE:=Europe/Zagreb}"
sudo systemsetup -settimezone $TARGET_TIMEZONE > /dev/null
echo "Timezone set to $TARGET_TIMEZONE"

# Disable the “Are you sure you want to open this application?” dialog
defaults write com.apple.LaunchServices LSQuarantine -bool false

# Disable automatic period substitution as it’s annoying when typing code
defaults write NSGlobalDomain NSAutomaticPeriodSubstitutionEnabled -bool false

# Disable smart quotes as they’re annoying when typing code
defaults write NSGlobalDomain NSAutomaticQuoteSubstitutionEnabled -bool false

# Disable press-and-hold for accented keys in favor of key repeat
defaults write NSGlobalDomain ApplePressAndHoldEnabled -bool false

# Type speed and delay
defaults write -g InitialKeyRepeat -int 13 # normal minimum is 15 (225 ms)
defaults write -g KeyRepeat -int 1

# Stop iTunes from responding to the keyboard media keys
launchctl unload -w /System/Library/LaunchAgents/com.apple.rcd.plist 2> /dev/null

# Ensure battery percentage is displayed
defaults write com.apple.menuextra.battery ShowPercent YES

###############################################################################
# Energy saving                                                               #
###############################################################################
# Enable lid wakeup
sudo pmset -a lidwake 1

# Restart automatically on power loss
sudo pmset -a autorestart 1

# Restart automatically if the computer freezes
sudo systemsetup -setrestartfreeze on

# Sleep the display after 15 minutes
sudo pmset -a displaysleep 15

# Disable machine sleep while charging
sudo pmset -c sleep 0

# Set machine sleep to 5 minutes on battery
sudo pmset -b sleep 15

# Set standby delay to 24 hours (default is 1 hour)
sudo pmset -a standbydelay 86400

# Never go into computer sleep mode
sudo systemsetup -setcomputersleep Off > /dev/null

###############################################################################
# Screen                                                                      #
###############################################################################
# Require password immediately after sleep or screen saver begins
defaults write com.apple.screensaver askForPassword -int 1
defaults write com.apple.screensaver askForPasswordDelay -int 0

# Save screenshots to the desktop
defaults write com.apple.screencapture location -string "${HOME}/Desktop"

# Save screenshots in PNG format (other options: BMP, GIF, JPG, PDF, TIFF)
defaults write com.apple.screencapture type -string "png"

# Disable shadow in screenshots
defaults write com.apple.screencapture disable-shadow -bool true


###############################################################################
# Finder                                                                      #
###############################################################################
# Show the /Volumes folder
sudo chflags nohidden /Volumes

# Avoid creating .DS_Store files on network or USB volumes
defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool true
defaults write com.apple.desktopservices DSDontWriteUSBStores -bool true

# Keep folders on top when sorting by name
defaults write com.apple.finder _FXSortFoldersFirst -bool true

# Allow quitting via ⌘ + Q; doing so will also hide desktop icons
defaults write com.apple.finder QuitMenuItem -bool true

# Show all filename extensions
defaults write -globalDomain AppleShowAllExtensions -bool true

# Show hidden files and directories
defaults write com.apple.finder AppleShowAllFiles YES

# Show status bar
defaults write com.apple.finder ShowStatusBar -bool true

# Show path bar
defaults write com.apple.finder ShowPathbar -bool true

# Display full POSIX path as Finder window title
defaults write com.apple.finder _FXShowPosixPathInTitle -bool true

# Ensure CapsLock is mapped to Escape
# https://stackoverflow.com/a/46460200
curl -sL https://gist.githubusercontent.com/liamdawson/8dba17715c452dad996932291193c353/raw/com.ldaws.CapslockEsc.plist --output ~/Library/LaunchAgents/com.ldaws.CapslockEsc.plist
launchctl load ~/Library/LaunchAgents/com.ldaws.CapslockEsc.plist

###############################################################################
# Terminal & iTerm 2                                                          #
###############################################################################
# Only use UTF-8 in Terminal.app
defaults write com.apple.terminal StringEncodings -array 4

# Don’t display the annoying prompt when quitting iTerm
defaults write com.googlecode.iterm2 PromptOnQuit -bool false

###############################################################################
# Mac App Store                                                               #
###############################################################################

# Enable the WebKit Developer Tools in the Mac App Store
defaults write com.apple.appstore WebKitDeveloperExtras -bool true

# Enable Debug Menu in the Mac App Store
defaults write com.apple.appstore ShowDebugMenu -bool true

# Enable the automatic update check
defaults write com.apple.SoftwareUpdate AutomaticCheckEnabled -bool true

# Check for software updates daily, not just once per week
defaults write com.apple.SoftwareUpdate ScheduleFrequency -int 1

###############################################################################
# Photos                                                                      #
###############################################################################

# Prevent Photos from opening automatically when devices are plugged in
defaults -currentHost write com.apple.ImageCapture disableHotPlug -bool true

###############################################################################
# Dock                                                                        #
###############################################################################

# Don’t animate opening applications from the Dock
defaults write com.apple.dock launchanim -bool false

# Show indicator lights for open applications in the Dock
defaults write com.apple.dock show-process-indicators -bool true

# Automatically hide and show the Dock
defaults write com.apple.dock autohide -bool true

# Remove the auto-hiding Dock delay
defaults write com.apple.dock autohide-delay -float 0

# Remove the animation when hiding/showing the Dock
defaults write com.apple.dock autohide-time-modifier -float 0

###############################################################################
# Misc                                                                        #
###############################################################################
# Use F1, F2, etc. as function keys
defaults write -globalDomain 'com.apple.keyboard.fnState' -bool true


# Install Brew
if ! type brew > /dev/null; then
  echo "Homebrew not found. Installing..."
  bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)" < /dev/null
fi

# Install GnuPG
brew install gnupg

function cask_install() {
  for package in "$@"
  do
    if brew cask list -1 | grep $package > /dev/null 2>&1; then
      echo "$package is already installed."
    else
     brew cask install $package
    fi
  done

  return 0
}

cask_install google-chrome iterm2 spotify whatsapp slack github

printf "\nAll done! Restart now in order for everything to take effect."
